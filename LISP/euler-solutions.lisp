(load "math.lisp")

(defparameter problem_solutions  #(

'((math::sum-mults-of-args-up-to 1000 3 5)
"Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.")

'((math::even-fibonacci-sum 4000000)
"Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
")

'((math::largest-prime-factor 600851475143)
"Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
")

'((math::max-palindrome-prod-of-2-n-digit-nums 3)
"Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
")

'((math::smallest-divisible-by-all-in-range 20)
"Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
")

'((math::square-of-sum-sum-of-square-diff 100)
"Problem 6
The sum of the squares of the first ten natural numbers is,
1^2 + 2^2 + ... + 10^2 = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)^2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
")

'((math::nth-prime 10001)
"Problem 7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
")

'((math::largest-n-digit-product-in-series 13 "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450")
"Problem 8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
")))

(defun euler_fun (num &key solution show-form show-doc)
    "Takes problem number and evaluates the answer or shows solution form, according to keys.
    Numbering of problems starts with 1."
    (setf solution t) ;; It is the default action anyway, if all else is nil it should be executed, keyword allows for code clarity
    (if (or (< num 1) (> num (length problem_solutions)))
        (format t "Invalid problem number~%")
        (let ((problem-info (eval (aref problem_solutions (- num 1)))))
        (cond
            (show-form (first problem-info))
            (show-doc (second problem-info))
            (solution (eval (first problem-info)))))))

(defun show_solved (&key export)
"Prints the presentations and found solutions of all the problems on terminal,or exports them to solved_problems.txt"
(let ((dest (if export (open "solved_problems.txt" :direction :output :if-exists :overwrite :if-does-not-exist :create) t)))
        (loop for i from 1 to (length problem_solutions) do (format dest "****************************************~%~%~a~%~%Solution: ~a~%~%****************************************~%" 
                                (euler_fun i :show-doc t) (euler_fun i :solution t)))
(if export (close dest))
))